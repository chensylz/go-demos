// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/1278651995/go-demos/scene/seckill/seckill03/ent/merchandise"
	"github.com/1278651995/go-demos/scene/seckill/seckill03/ent/order"
	"github.com/1278651995/go-demos/scene/seckill/seckill03/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMerchandise = "Merchandise"
	TypeOrder       = "Order"
)

// MerchandiseMutation represents an operation that mutates the Merchandise nodes in the graph.
type MerchandiseMutation struct {
	config
	op             Op
	typ            string
	id             *int
	uid            *string
	created_at     *time.Time
	updated_at     *time.Time
	deactivated_at *time.Time
	stock          *uint
	addstock       *int
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Merchandise, error)
	predicates     []predicate.Merchandise
}

var _ ent.Mutation = (*MerchandiseMutation)(nil)

// merchandiseOption allows management of the mutation configuration using functional options.
type merchandiseOption func(*MerchandiseMutation)

// newMerchandiseMutation creates new mutation for the Merchandise entity.
func newMerchandiseMutation(c config, op Op, opts ...merchandiseOption) *MerchandiseMutation {
	m := &MerchandiseMutation{
		config:        c,
		op:            op,
		typ:           TypeMerchandise,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMerchandiseID sets the ID field of the mutation.
func withMerchandiseID(id int) merchandiseOption {
	return func(m *MerchandiseMutation) {
		var (
			err   error
			once  sync.Once
			value *Merchandise
		)
		m.oldValue = func(ctx context.Context) (*Merchandise, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Merchandise.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMerchandise sets the old Merchandise of the mutation.
func withMerchandise(node *Merchandise) merchandiseOption {
	return func(m *MerchandiseMutation) {
		m.oldValue = func(context.Context) (*Merchandise, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MerchandiseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MerchandiseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MerchandiseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MerchandiseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Merchandise.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUID sets the "uid" field.
func (m *MerchandiseMutation) SetUID(s string) {
	m.uid = &s
}

// UID returns the value of the "uid" field in the mutation.
func (m *MerchandiseMutation) UID() (r string, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *MerchandiseMutation) ResetUID() {
	m.uid = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MerchandiseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MerchandiseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MerchandiseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MerchandiseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MerchandiseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MerchandiseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (m *MerchandiseMutation) SetDeactivatedAt(t time.Time) {
	m.deactivated_at = &t
}

// DeactivatedAt returns the value of the "deactivated_at" field in the mutation.
func (m *MerchandiseMutation) DeactivatedAt() (r time.Time, exists bool) {
	v := m.deactivated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeactivatedAt returns the old "deactivated_at" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldDeactivatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeactivatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeactivatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeactivatedAt: %w", err)
	}
	return oldValue.DeactivatedAt, nil
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (m *MerchandiseMutation) ClearDeactivatedAt() {
	m.deactivated_at = nil
	m.clearedFields[merchandise.FieldDeactivatedAt] = struct{}{}
}

// DeactivatedAtCleared returns if the "deactivated_at" field was cleared in this mutation.
func (m *MerchandiseMutation) DeactivatedAtCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldDeactivatedAt]
	return ok
}

// ResetDeactivatedAt resets all changes to the "deactivated_at" field.
func (m *MerchandiseMutation) ResetDeactivatedAt() {
	m.deactivated_at = nil
	delete(m.clearedFields, merchandise.FieldDeactivatedAt)
}

// SetStock sets the "stock" field.
func (m *MerchandiseMutation) SetStock(u uint) {
	m.stock = &u
	m.addstock = nil
}

// Stock returns the value of the "stock" field in the mutation.
func (m *MerchandiseMutation) Stock() (r uint, exists bool) {
	v := m.stock
	if v == nil {
		return
	}
	return *v, true
}

// OldStock returns the old "stock" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldStock(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStock: %w", err)
	}
	return oldValue.Stock, nil
}

// AddStock adds u to the "stock" field.
func (m *MerchandiseMutation) AddStock(u int) {
	if m.addstock != nil {
		*m.addstock += u
	} else {
		m.addstock = &u
	}
}

// AddedStock returns the value that was added to the "stock" field in this mutation.
func (m *MerchandiseMutation) AddedStock() (r int, exists bool) {
	v := m.addstock
	if v == nil {
		return
	}
	return *v, true
}

// ResetStock resets all changes to the "stock" field.
func (m *MerchandiseMutation) ResetStock() {
	m.stock = nil
	m.addstock = nil
}

// Where appends a list predicates to the MerchandiseMutation builder.
func (m *MerchandiseMutation) Where(ps ...predicate.Merchandise) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MerchandiseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Merchandise).
func (m *MerchandiseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MerchandiseMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.uid != nil {
		fields = append(fields, merchandise.FieldUID)
	}
	if m.created_at != nil {
		fields = append(fields, merchandise.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, merchandise.FieldUpdatedAt)
	}
	if m.deactivated_at != nil {
		fields = append(fields, merchandise.FieldDeactivatedAt)
	}
	if m.stock != nil {
		fields = append(fields, merchandise.FieldStock)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MerchandiseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case merchandise.FieldUID:
		return m.UID()
	case merchandise.FieldCreatedAt:
		return m.CreatedAt()
	case merchandise.FieldUpdatedAt:
		return m.UpdatedAt()
	case merchandise.FieldDeactivatedAt:
		return m.DeactivatedAt()
	case merchandise.FieldStock:
		return m.Stock()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MerchandiseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case merchandise.FieldUID:
		return m.OldUID(ctx)
	case merchandise.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case merchandise.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case merchandise.FieldDeactivatedAt:
		return m.OldDeactivatedAt(ctx)
	case merchandise.FieldStock:
		return m.OldStock(ctx)
	}
	return nil, fmt.Errorf("unknown Merchandise field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchandiseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case merchandise.FieldUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case merchandise.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case merchandise.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case merchandise.FieldDeactivatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeactivatedAt(v)
		return nil
	case merchandise.FieldStock:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStock(v)
		return nil
	}
	return fmt.Errorf("unknown Merchandise field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MerchandiseMutation) AddedFields() []string {
	var fields []string
	if m.addstock != nil {
		fields = append(fields, merchandise.FieldStock)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MerchandiseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case merchandise.FieldStock:
		return m.AddedStock()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchandiseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case merchandise.FieldStock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStock(v)
		return nil
	}
	return fmt.Errorf("unknown Merchandise numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MerchandiseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(merchandise.FieldDeactivatedAt) {
		fields = append(fields, merchandise.FieldDeactivatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MerchandiseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MerchandiseMutation) ClearField(name string) error {
	switch name {
	case merchandise.FieldDeactivatedAt:
		m.ClearDeactivatedAt()
		return nil
	}
	return fmt.Errorf("unknown Merchandise nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MerchandiseMutation) ResetField(name string) error {
	switch name {
	case merchandise.FieldUID:
		m.ResetUID()
		return nil
	case merchandise.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case merchandise.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case merchandise.FieldDeactivatedAt:
		m.ResetDeactivatedAt()
		return nil
	case merchandise.FieldStock:
		m.ResetStock()
		return nil
	}
	return fmt.Errorf("unknown Merchandise field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MerchandiseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MerchandiseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MerchandiseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MerchandiseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MerchandiseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MerchandiseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MerchandiseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Merchandise unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MerchandiseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Merchandise edge %s", name)
}

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                Op
	typ               string
	id                *int
	merchandise_id    *int
	addmerchandise_id *int
	user_id           *int
	adduser_id        *int
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Order, error)
	predicates        []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id int) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMerchandiseID sets the "merchandise_id" field.
func (m *OrderMutation) SetMerchandiseID(i int) {
	m.merchandise_id = &i
	m.addmerchandise_id = nil
}

// MerchandiseID returns the value of the "merchandise_id" field in the mutation.
func (m *OrderMutation) MerchandiseID() (r int, exists bool) {
	v := m.merchandise_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMerchandiseID returns the old "merchandise_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldMerchandiseID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMerchandiseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMerchandiseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMerchandiseID: %w", err)
	}
	return oldValue.MerchandiseID, nil
}

// AddMerchandiseID adds i to the "merchandise_id" field.
func (m *OrderMutation) AddMerchandiseID(i int) {
	if m.addmerchandise_id != nil {
		*m.addmerchandise_id += i
	} else {
		m.addmerchandise_id = &i
	}
}

// AddedMerchandiseID returns the value that was added to the "merchandise_id" field in this mutation.
func (m *OrderMutation) AddedMerchandiseID() (r int, exists bool) {
	v := m.addmerchandise_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMerchandiseID resets all changes to the "merchandise_id" field.
func (m *OrderMutation) ResetMerchandiseID() {
	m.merchandise_id = nil
	m.addmerchandise_id = nil
}

// SetUserID sets the "user_id" field.
func (m *OrderMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrderMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *OrderMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *OrderMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrderMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.merchandise_id != nil {
		fields = append(fields, order.FieldMerchandiseID)
	}
	if m.user_id != nil {
		fields = append(fields, order.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldMerchandiseID:
		return m.MerchandiseID()
	case order.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldMerchandiseID:
		return m.OldMerchandiseID(ctx)
	case order.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldMerchandiseID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMerchandiseID(v)
		return nil
	case order.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.addmerchandise_id != nil {
		fields = append(fields, order.FieldMerchandiseID)
	}
	if m.adduser_id != nil {
		fields = append(fields, order.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldMerchandiseID:
		return m.AddedMerchandiseID()
	case order.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldMerchandiseID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMerchandiseID(v)
		return nil
	case order.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldMerchandiseID:
		m.ResetMerchandiseID()
		return nil
	case order.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Order edge %s", name)
}
