// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/1278651995/go-demos/scene/seckill/seckill03/ent/merchandise"
	"github.com/1278651995/go-demos/scene/seckill/seckill03/ent/predicate"
)

// MerchandiseUpdate is the builder for updating Merchandise entities.
type MerchandiseUpdate struct {
	config
	hooks    []Hook
	mutation *MerchandiseMutation
}

// Where appends a list predicates to the MerchandiseUpdate builder.
func (mu *MerchandiseUpdate) Where(ps ...predicate.Merchandise) *MerchandiseUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MerchandiseUpdate) SetUpdatedAt(t time.Time) *MerchandiseUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (mu *MerchandiseUpdate) SetDeactivatedAt(t time.Time) *MerchandiseUpdate {
	mu.mutation.SetDeactivatedAt(t)
	return mu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (mu *MerchandiseUpdate) SetNillableDeactivatedAt(t *time.Time) *MerchandiseUpdate {
	if t != nil {
		mu.SetDeactivatedAt(*t)
	}
	return mu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (mu *MerchandiseUpdate) ClearDeactivatedAt() *MerchandiseUpdate {
	mu.mutation.ClearDeactivatedAt()
	return mu
}

// SetStock sets the "stock" field.
func (mu *MerchandiseUpdate) SetStock(u uint) *MerchandiseUpdate {
	mu.mutation.ResetStock()
	mu.mutation.SetStock(u)
	return mu
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (mu *MerchandiseUpdate) SetNillableStock(u *uint) *MerchandiseUpdate {
	if u != nil {
		mu.SetStock(*u)
	}
	return mu
}

// AddStock adds u to the "stock" field.
func (mu *MerchandiseUpdate) AddStock(u int) *MerchandiseUpdate {
	mu.mutation.AddStock(u)
	return mu
}

// Mutation returns the MerchandiseMutation object of the builder.
func (mu *MerchandiseUpdate) Mutation() *MerchandiseMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MerchandiseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchandiseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MerchandiseUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MerchandiseUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MerchandiseUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MerchandiseUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := merchandise.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MerchandiseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   merchandise.Table,
			Columns: merchandise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: merchandise.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchandise.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchandise.FieldDeactivatedAt,
		})
	}
	if mu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: merchandise.FieldDeactivatedAt,
		})
	}
	if value, ok := mu.mutation.Stock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: merchandise.FieldStock,
		})
	}
	if value, ok := mu.mutation.AddedStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: merchandise.FieldStock,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchandise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MerchandiseUpdateOne is the builder for updating a single Merchandise entity.
type MerchandiseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MerchandiseMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MerchandiseUpdateOne) SetUpdatedAt(t time.Time) *MerchandiseUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (muo *MerchandiseUpdateOne) SetDeactivatedAt(t time.Time) *MerchandiseUpdateOne {
	muo.mutation.SetDeactivatedAt(t)
	return muo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (muo *MerchandiseUpdateOne) SetNillableDeactivatedAt(t *time.Time) *MerchandiseUpdateOne {
	if t != nil {
		muo.SetDeactivatedAt(*t)
	}
	return muo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (muo *MerchandiseUpdateOne) ClearDeactivatedAt() *MerchandiseUpdateOne {
	muo.mutation.ClearDeactivatedAt()
	return muo
}

// SetStock sets the "stock" field.
func (muo *MerchandiseUpdateOne) SetStock(u uint) *MerchandiseUpdateOne {
	muo.mutation.ResetStock()
	muo.mutation.SetStock(u)
	return muo
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (muo *MerchandiseUpdateOne) SetNillableStock(u *uint) *MerchandiseUpdateOne {
	if u != nil {
		muo.SetStock(*u)
	}
	return muo
}

// AddStock adds u to the "stock" field.
func (muo *MerchandiseUpdateOne) AddStock(u int) *MerchandiseUpdateOne {
	muo.mutation.AddStock(u)
	return muo
}

// Mutation returns the MerchandiseMutation object of the builder.
func (muo *MerchandiseUpdateOne) Mutation() *MerchandiseMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MerchandiseUpdateOne) Select(field string, fields ...string) *MerchandiseUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Merchandise entity.
func (muo *MerchandiseUpdateOne) Save(ctx context.Context) (*Merchandise, error) {
	var (
		err  error
		node *Merchandise
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchandiseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MerchandiseUpdateOne) SaveX(ctx context.Context) *Merchandise {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MerchandiseUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MerchandiseUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MerchandiseUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := merchandise.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MerchandiseUpdateOne) sqlSave(ctx context.Context) (_node *Merchandise, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   merchandise.Table,
			Columns: merchandise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: merchandise.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Merchandise.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, merchandise.FieldID)
		for _, f := range fields {
			if !merchandise.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != merchandise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchandise.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchandise.FieldDeactivatedAt,
		})
	}
	if muo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: merchandise.FieldDeactivatedAt,
		})
	}
	if value, ok := muo.mutation.Stock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: merchandise.FieldStock,
		})
	}
	if value, ok := muo.mutation.AddedStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: merchandise.FieldStock,
		})
	}
	_node = &Merchandise{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchandise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
