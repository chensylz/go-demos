// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/1278651995/go-demos/scene/seckill/seckill03/ent/merchandise"
)

// Merchandise is the model entity for the Merchandise schema.
type Merchandise struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// Stock holds the value of the "stock" field.
	// 库存
	Stock uint `json:"stock,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Merchandise) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchandise.FieldID, merchandise.FieldStock:
			values[i] = new(sql.NullInt64)
		case merchandise.FieldUID:
			values[i] = new(sql.NullString)
		case merchandise.FieldCreatedAt, merchandise.FieldUpdatedAt, merchandise.FieldDeactivatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Merchandise", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Merchandise fields.
func (m *Merchandise) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchandise.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case merchandise.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				m.UID = value.String
			}
		case merchandise.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case merchandise.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case merchandise.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				m.DeactivatedAt = new(time.Time)
				*m.DeactivatedAt = value.Time
			}
		case merchandise.FieldStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				m.Stock = uint(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Merchandise.
// Note that you need to call Merchandise.Unwrap() before calling this method if this Merchandise
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Merchandise) Update() *MerchandiseUpdateOne {
	return (&MerchandiseClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Merchandise entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Merchandise) Unwrap() *Merchandise {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Merchandise is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Merchandise) String() string {
	var builder strings.Builder
	builder.WriteString("Merchandise(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", uid=")
	builder.WriteString(m.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	if v := m.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", stock=")
	builder.WriteString(fmt.Sprintf("%v", m.Stock))
	builder.WriteByte(')')
	return builder.String()
}

// Merchandises is a parsable slice of Merchandise.
type Merchandises []*Merchandise

func (m Merchandises) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
